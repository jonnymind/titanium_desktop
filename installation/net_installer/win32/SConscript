#!/usr/bin/env python
import os.path as path

Import('build')

Env = build.env.Clone()
Env.Append(CPPDEFINES=['USE_NO_EXPORT=1'])

Env.Append(LIBS=['wininet', 'urlmon', 'comctl32', 'comdlg32', 'ole32', 'kernel32', 'user32', 'shell32', 'advapi32', 'gdi32', 'iphlpapi'])

atlmfc_path = 'C:\\Program Files\\Microsoft Visual Studio 8\\VC\\atlmfc'
if not path.exists(atlmfc_path):
	atlmfc_path = 'C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\atlmfc'

Env.Append(CPPPATH=[path.join(atlmfc_path, 'include')])
Env.Append(LIBPATH=[path.join(atlmfc_path, 'lib')])

ccf = Env['CCFLAGS']
if '/MD' in ccf: ccf.remove('/MD')
ccf.append('/MT')
ccf.append('/Os')
ccf.append('/O1')
Env.Append(CCFLAGS=ccf)
#Env.Append(LINKFLAGS=['/SUBSYSTEM:CONSOLE'])
sources = Glob("installer-project/*.cpp") + Env.RES("installer-project/progress.rc")
out_file = path.join(build.runtime_build_dir, 'installer', 'Installer.exe')

Env.Append(CPPPATH=[build.kroll_utils_dir])
sources.extend(build.get_kroll_utils(path.join(build.dir, 'objs', 'netinstaller')))

p = Env.Program(out_file, sources)
build.mark_build_target(p)

# Don't use the common controls manifest from the support directory, because
# our copy contains some special provisions for UAC.
common_controls_manifest = path.join(build.cwd(), 'common_controls.manifest')
Env.AddPostAction(p, 'mt.exe -nologo -manifest "%s" -outputresource:"%s;1"' % (common_controls_manifest, out_file))
