#!/usr/bin/env python
Import('build')
import os, os.path as path

Env = build.env.Clone()
Env.Append(CPPDEFINES=['USE_NO_EXPORT=1', '_CRT_SECURE_NO_WARNINGS=1'])
Env.Append(LIBS=['kernel32','shell32','user32','comctl32','comdlg32'])
# /MD
Env.Append(CCFLAGS=['/O2','/GL','/FD','/EHsc','/MT','/W3','/Wp64','/Zi','/TP'])
#'/MANIFEST', '/MANIFESTFILE:build\\win32\\self_extractor.exe.intermediate.manifest',
Env.Append(LINKFLAGS=['/SUBSYSTEM:WINDOWS','/OPT:REF','/OPT:ICF','/LTCG','/MACHINE:X86'])

atlmfc_path = 'C:\\Program Files\\Microsoft Visual Studio 8\\VC\\atlmfc'
if not path.exists(atlmfc_path):
	atlmfc_path = 'C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\atlmfc'

Env.Append(LIBPATH=[path.join(atlmfc_path, 'lib')])
Env.Append(CPPPATH=[path.join(atlmfc_path, 'include')])

resfile = Env.RES('progress.rc')
p = Env.Program(build.dir + '/self_extractor', Glob('*.cpp') + resfile)
build.mark_build_target(p)
#Env.AddPostAction(p, ('mt.exe -nologo /outputresource:"%s\self_extractor.exe;#1" /manifest "%s"' % (build.dir, 'build\\win32\\self_extractor.exe.intermediate.manifest')))
