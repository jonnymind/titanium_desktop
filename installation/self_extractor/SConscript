#!/usr/bin/env python
Import('build')
import os, os.path as path

Env = build.env.Clone()
Env.Append(CPPDEFINES=['USE_NO_EXPORT=1', '_CRT_SECURE_NO_WARNINGS=1'])
Env.Append(LIBS=['kernel32', 'shell32', 'user32', 'comctl32', 'comdlg32'])

ccf = Env['CCFLAGS'][:]
if '/MD' in ccf: ccf.remove('/MD')
ccf.append('/MT') # Allow threads
ccf.append('/GL') # Whole-program opt.
ccf.append('/FD') # This might not be valid
ccf.append('/Wp64') # Warn about 64bit compat issues
ccf.append('/TP') # Treat all source files as C++
Env['CCFLAGS'] = ccf

Env.Append(LINKFLAGS=[
	'/SUBSYSTEM:WINDOWS', # Does not require a console
	'/OPT:REF', # Eliminate non-referenced functions/data
	'/OPT:ICF', # Fold identical COMDATs
	'/LTCG', # Link-time code generation
	'/MACHINE:X86'])

resfile = Env.RES('progress.rc')
p = Env.Program(build.dir + '/self_extractor', Glob('*.cpp') + resfile)
build.mark_build_target(p)
#Env.AddPostAction(p, ('mt.exe -nologo /outputresource:"%s\self_extractor.exe;#1" /manifest "%s"' % (build.dir, 'build\\win32\\self_extractor.exe.intermediate.manifest')))
