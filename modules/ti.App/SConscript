#!/usr/bin/env python
import os, os.path as path
Import('build')

env = build.env.Clone();
env.Append(CPPDEFINES = ('TITANIUM_APP_API_EXPORT', 1))

build.add_thirdparty(env, 'poco')
if build.is_osx():
	env.Append(LIBS=['kroll'])
	env.Append(LIBS=['xml2'])
	env.Append(CPPPATH=['/usr/include/libxml2'])

if build.is_win32():
	env.Append(CPPPATH = [path.join(build.third_party,'libxml','include'), path.join(build.third_party, 'icu','include')])
	env.Append(LIBPATH = [path.join(build.third_party,'webkit','lib')])
	env.Append(LIBS=['libxml2', 'pthreadVC2'])
else:
	env.Append(ENV = {'PATH' : os.environ['PATH']})
	if os.environ.has_key('PKG_CONFIG_PATH'):
		env.AppendENVPath('PKG_CONFIG_PATH', os.environ['PKG_CONFIG_PATH'])
	if not build.is_osx():
		env.ParseConfig('pkg-config --cflags --libs libxml-2.0')

m = build.add_module('ti.App', env=env)
sources = Glob('*.cpp') + Glob('Properties/*.cpp')
t = env.SharedLibrary(target = m.build_dir + '/tiappmodule', source=sources)
build.mark_build_target(t)

t = build.utils.CopyTree(Glob('*.js'), m.build_dir)
build.mark_build_target(t)
