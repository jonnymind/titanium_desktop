#!/usr/bin/env python
import os.path as path
Import('build')
Import('debug')

Env = build.env.Clone()
#Env.Append(CPPDEFINES=['USE_NO_EXPORT=1'])

Env.Append(LIBS=['wininet', 'urlmon', 'comctl32', 'comdlg32', 'ole32', 'kernel32', 'user32', 'shell32', 'advapi32', 'gdi32', 'iphlpapi', 'winspool', 'shell32', 'oleaut32', 'uuid', 'odbc32', 'odbccp32'])
 

atlmfc_path = 'C:\\Program Files\\Microsoft Visual Studio 8\\VC\\atlmfc'
if not path.exists(atlmfc_path):
	atlmfc_path = 'C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\atlmfc'
Env.Append(LIBPATH=[path.join(atlmfc_path, 'lib')])

atlmfc_path = 'C:\\Program Files\\Microsoft Visual Studio 8\\VC\\atlmfc\\lib'
if not path.exists(atlmfc_path):
	atlmfc_path = 'C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\atlmfc\\lib'
Env.Append(LIBPATH=[path.join(atlmfc_path, 'i386')])

ccf = Env['CCFLAGS'][:]
cflags = Env['CPPDEFINES'][:]

if '/GR' in ccf: 
	ccf.remove('/GR')
	ccf.append('/GR-')
if not debug:
	if '/MD' in ccf: ccf.remove('/MD')
	ccf.append('/MT')
	ccf.append('/Os')
	ccf.append('/O1')
else:
	if '/MDd' in ccf: ccf.remove('/MDd')
	ccf.append('/MTd')
	ccf.append('/RTC1')
Env.Append(CPPDEFINES = ('_WINDOWS', 1))
Env.Append(CPPDEFINES = ('_ATL_STATIC_REGISTRY', 1))
Env.Append(CPPDEFINES = ('_UNICODE', 1))
Env.Append(CPPDEFINES = ('UNICODE', 1))

sources = Glob("*.cpp") + Env.RES("ti_depends.rc")
out_file = path.join(build.dir, 'ti_depends', 'ti_depends.exe')

p = Env.Program(out_file, sources)
Alias('tidepends', p)

# runtime_manifest = path.join(build.cwd(), 'ti_depends.exe.Debug.manifest')
# if not debug:
# 	runtime_manifest = path.join(build.cwd(), 'ti_depends.exe.Release.manifest')
# 	
# Env.AddPostAction(p, 'mt.exe -nologo -verbose -manifest "%s" -outputresource:"%s;#1"' % (runtime_manifest, out_file))
